import streamlit as st
import pandas as pd
from cd_modules.core.inquiry_engine import InquiryEngine
from cd_modules.core.contextual_generator import ContextualGenerator
from cd_modules.core.epistemic_navigator import EpistemicNavigator
from datetime import datetime
import io

# --------- PANEL INICIAL: SOBRE LA DEMO ---------
with st.expander("‚ÑπÔ∏è Sobre esta demo (leer antes de usar)", expanded=True):
    st.markdown("""
**MVP Deliberativo en Derecho de la Propiedad Intelectual**

- Esta demo muestra el flujo y experiencia del prototipo funcional de asistencia deliberativa para Derecho de PI.
- **Componentes reales:** √°rbol deliberativo, generaci√≥n de contexto jur√≠dico, Reasoning Tracker (historial y descarga).
- **Componentes simulados:** corpus legal (BOE, OEPM, sentencias, tratados), grafo PI, motor PathRAG, validador epist√©mico.
- En la versi√≥n final, la app integrar√° b√∫squeda en bases reales, grafo PI visual, y validaci√≥n autom√°tica de afirmaciones legales.
- Si tienes dudas sobre el roadmap t√©cnico, consulta la documentaci√≥n o pregunta al presentador.
""")

st.markdown("---")

# --------- MOCKUP VISUAL DEL GRAFO PI FUTURO ---------
with st.expander("üìä Vista previa: Futuro grafo PI (mockup visual)"):
    st.image("https://raw.githubusercontent.com/jftamames/codigo-deliberativo-PDI/main/assets/grafo_pi_mockup.png",
             caption="Ejemplo ilustrativo de c√≥mo el grafo PI mostrar√≠a relaciones entre conceptos, leyes y casos.")
    st.caption("En la versi√≥n avanzada, este grafo ser√° interactivo y se generar√° din√°micamente seg√∫n la consulta.")

# --------- SUGERENCIA DE PREGUNTA PROBLEM√ÅTICA ---------
with st.expander("üéì ¬øEjemplo de pregunta compleja para probar?"):
    st.code("¬øEs protegible por derecho de autor una base de datos generada parcialmente por IA?")

st.markdown("---")

# --------- INPUT PRINCIPAL DEL USUARIO ---------
st.header("üß© Consulta jur√≠dica en Propiedad Intelectual")
pregunta = st.text_area("Introduce tu pregunta jur√≠dica (PI):", 
                        placeholder="Ejemplo: ¬øCu√°les son los requisitos para registrar una marca de la UE?")

if pregunta:
    # --------- INQUIRY ENGINE: GENERACI√ìN DEL √ÅRBOL DELIBERATIVO ---------
    st.subheader("üîπ √Årbol deliberativo de subpreguntas")
    st.caption("üß† Este √°rbol representa la descomposici√≥n conceptual de la pregunta en subtemas PI, equivalente a un grafo legal especializado.")

    ie = InquiryEngine(pregunta, depth=2, width=2)
    tree = ie.generate()

    def display_tree(tree, level=0):
        for nodo, hijos in tree.items():
            st.markdown("‚ÄÉ" * level + f"- **{nodo}**")
            if hijos:
                display_tree(hijos, level + 1)
    display_tree(tree)

    st.markdown("---")

    # --------- EPISTEMIC NAVIGATOR: FUENTES SIMULADAS ---------
    st.subheader("üîπ Fuentes relevantes para cada subpregunta")
    st.markdown("üîé *Fuentes simuladas para demo. En producci√≥n, la recuperaci√≥n ser√° sobre BOE, OEPM, sentencias y tratados oficiales.*")

    nav = EpistemicNavigator()
    fuentes_dict = {}
    for padre in tree:
        fuentes = [src for src, _ in nav.search(padre, k=3)]
        fuentes_dict[padre] = fuentes
        st.markdown(f"**{padre}**")
        for fuente in fuentes:
            st.markdown(f"- {fuente}")

    st.markdown("---")

    # --------- CONTEXTUAL GENERATOR: RESPUESTA A SUBPREGUNTAS ---------
    st.subheader("üîπ Generaci√≥n de contexto jur√≠dico (simulada)")
    st.caption("üìë Contexto generado con IA adaptada a PI. En el futuro, cada respuesta ser√° validada autom√°ticamente por el corpus legal.")

    cg = ContextualGenerator()
    respuestas = {}
    for padre in tree:
        if st.button(f"Generar contexto para: {padre}"):
            contexto = cg.generate(padre, fuentes_dict[padre])
            respuestas[padre] = contexto
            st.markdown(f"**Respuesta generada:** {contexto}")

    st.markdown("---")

    # --------- REASONING TRACKER Y EXPORTACI√ìN ---------
    st.subheader("üîπ Reasoning Tracker: Historial y descarga")
    st.markdown("üìù Puedes descargar todo tu razonamiento y fuentes como CSV. Este registro es clave para auditor√≠a, docencia y compliance.")

    tracker_data = []
    for padre in tree:
        tracker_data.append({
            "subpregunta": padre,
            "fuentes": "; ".join(fuentes_dict[padre]),
            "respuesta": respuestas.get(padre, "")
        })
    df_tracker = pd.DataFrame(tracker_data)

    csv_buffer = io.StringIO()
    df_tracker.to_csv(csv_buffer, index=False)
    st.download_button(
        label="‚¨áÔ∏è Descargar Reasoning Tracker (CSV)",
        data=csv_buffer.getvalue(),
        file_name=f"reasoning_tracker_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv",
        mime='text/csv'
    )

st.info("""
üîí **Demo:** Algunas funcionalidades avanzadas (grafo PI real, PathRAG, validaci√≥n epist√©mica autom√°tica) est√°n en fase de desarrollo.  
Consulta la documentaci√≥n del proyecto para m√°s informaci√≥n.
""")
